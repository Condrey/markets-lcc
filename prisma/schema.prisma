// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  email                   String?                  @unique
  name                    String?
  username                String?
  avatarUrl               String?
  telephone               String?
  passwordHash            String?
  bio                     String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  role                    Role                     @default(USER)
  isWelcomed              Boolean                  @default(false)
  isVerified              Boolean                  @default(false)
  emailVerified           Boolean                  @default(false)
  googleId                String?                  @unique
  githubId                String?                  @unique
  emailVerificationTokens EmailVerificationToken[]
  sessions                Session[]
  employees               Employee[]
  markets                 Market[]
  userRevenuePoints       UserRevenuePoint[]

  @@map("users")
}

model EmailVerificationToken {
  id      String @id @default(uuid())
  userId  String
  expires BigInt
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model Session {
  id             String   @id @default(uuid())
  userId         String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  lastVerifiedAt DateTime @default(now())
  secretHash     String   @default(uuid())
  role           Role     @default(USER)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Employee {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  markets    Market[]
  ippsNumber String   @unique

  @@map("employees")
}

model Market {
  id             String     @id @default(uuid())
  name           String     @unique
  location       String
  mapCoordinates String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  users          User[]
  managers       Employee[]

  @@map("markets")
}

model UserRevenuePoint {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  revenuePoint   RevenuePoint @relation(fields: [revenuePointId], references: [id])
  userId         String
  revenuePointId String

  @@map("user_revenue_points")
}

model RevenuePoint {
  id                String                     @id @default(uuid())
  revenuePointName  String                     @unique
  type              RevenuePointType           @default(LOCKUP)
  subscriptions     RevenuePointSubscription[]
  userRevenuePoints UserRevenuePoint[]

  @@map("revenue_points")
}

model RevenuePointSubscription {
  id               String        @id @default(uuid())
  subscriptionName String        @unique
  amount           Float
  revenuePoint     RevenuePoint? @relation(fields: [revenuePointId], references: [id])
  revenuePointId   String?

  @@map("revenue_point_subscriptions")
}

enum RevenuePointType {
  LOCKUP
  OPEN_SPACE
  STALL
}

enum Role {
  USER
  SUPER_ADMIN
  ADMIN
  MODERATOR
  ASSOCIATE
}
